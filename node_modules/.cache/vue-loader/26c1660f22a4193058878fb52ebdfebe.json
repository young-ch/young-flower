{"remainingRequest":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/src/apps/article/ArticleView.vue?vue&type=style&index=0&id=4e02363e&lang=scss&","dependencies":[{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/src/apps/article/ArticleView.vue","mtime":1666568796759},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/css-loader/dist/cjs.js","mtime":1665531751068},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1665531752098},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/postcss-loader/src/index.js","mtime":1665531751243},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/sass-loader/dist/cjs.js","mtime":1665531751056},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/cache-loader/dist/cjs.js","mtime":1665531750829},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/index.js","mtime":1665531752006}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJy4uLy4uL2Fzc2V0cy9zdHlsZS9sYXlvdXQvdmFyaWFibGVzJzsKCi5oMlRpdGxlIHsKICBAaW5jbHVkZSBoMi10aXRsZTsKfQoKLmZvcm1JbmZvIHsKICBAaW5jbHVkZSBmb3JtLWluZm87Cn0KCi51c2VyRGQgewogIHBhZGRpbmc6IDEwcHggMDsKfQoKLmxpc3QgewogIG92ZXJmbG93OiBoaWRkZW47Cn0KCi5jb21tZW50TGlzdCBkaXYudi1kYXRhLXRhYmxlX193cmFwcGVyID4gdGFibGUgPiB0Ym9keSA+IHRyID4gdGQ6bnRoLWNoaWxkKDEpIHsKICB3aWR0aDogMTIwcHggIWltcG9ydGFudDsKfQouY29tbWVudExpc3QgZGl2LnYtZGF0YS10YWJsZV9fd3JhcHBlciA+IHRhYmxlID4gdGJvZHkgPiB0ciA+IHRkOm50aC1jaGlsZCgzKSB7CiAgd2lkdGg6IDEyMHB4ICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["ArticleView.vue"],"names":[],"mappings":";AAylBA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ArticleView.vue","sourceRoot":"src/apps/article","sourcesContent":["<template>\n  <div class=\"flex-grow-1\">\n    <div class=\"d-flex align-center py-3\">\n      <div>\n        <div class=\"display-1\" v-if=\"id\">게시물 정보 상세 {{ article.title && `- ${article.title}` }} </div>\n\n        <div class=\"display-1\" v-else>게시물 생성</div>\n        <v-breadcrumbs :items=\"breadcrumbs\" class=\"pa-0 py-2\"></v-breadcrumbs>\n      </div>\n      <v-spacer></v-spacer>\n      <v-btn icon>\n        <v-icon>mdi-refresh</v-icon>\n      </v-btn>\n    </div>\n\n    <v-card class=\"my-2\">\n      <v-card-title>게시물 정보</v-card-title>\n      <v-card-text>\n        <div class=\"d-flex flex-column flex-sm-row\">\n          <div class=\"flex-grow-1 pt-2 pa-sm-2\">\n\n            <div class=\"d-flex\">\n              <span class=\"font-weight-bold\">제목</span>\n\n              <span class=\"mx-6\">\n                <v-chip\n                  color=\"primary\"\n                  small\n                  v-if=\"board.hasNotice && article.notice\"\n                >\n                  공지\n                </v-chip>\n\n                <template v-for=\"(c) in board.boardCategories\">\n                  <v-chip\n                    v-bind:key=\"c.categoryId\"\n                    small\n                    v-if=\"c.id === article.categoryId\"\n                  >\n                    {{c.categoryName}}\n                  </v-chip>\n                </template>\n\n                {{article.title}}\n              </span>\n            </div>\n\n            <div class=\"d-flex\" v-if=\"article.notice && board.hasPeriod && !article.always\">\n              <span class=\"font-weight-bold\">공지기간</span>\n\n              <span class=\"mx-6\">{{period}}\n<!--                <template>-->\n<!--                  <v-chip-->\n<!--                    color=\"primary\"-->\n<!--                    small-->\n<!--                  >-->\n<!--                    상시-->\n<!--                  </v-chip>-->\n<!--                </template>-->\n<!--                <template v-else>-->\n<!--                  {{period}}-->\n<!--                </template>-->\n              </span>\n            </div>\n\n            <div class=\"d-flex\">\n              <span class=\"font-weight-bold\">작성자</span>\n              <span class=\"mx-6\">\n                {{article.writer}}\n              </span>\n\n              <span class=\"font-weight-bold\">작성일</span>\n              <span class=\"mx-6\">\n                {{  article.createdAt | formatDate('YYYY-MM-DD HH:mm:ss') }}\n              </span>\n\n              <span class=\"font-weight-bold\">조회수</span>\n              <span class=\"mx-6\">\n                {{article.hits ? article.hits : 1}}\n              </span>\n            </div>\n\n            <div class=\"d-flex\">\n              <viewer-quill :val=\"article.contents\" />\n<!--              <div v-html=\"article.contents.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />')\" v-else>-->\n<!--              </div>             -->\n            </div>\n\n            <div class=\"d-flex\" v-if=\"board.hasAttachment\">\n              <span class=\"font-weight-bold\">첨부 파일</span>\n              <span class=\"mx-6\">\n                <div v-if=\"article.articleAttachments\">\n                  <v-row v-for=\"f in article.articleAttachments\" v-bind:key=\"f.id\" class=\"ma-2\">\n                    <v-btn text  @click.prevent=\"downloadFile(f)\"><v-icon>{{ f.contentType.indexOf('image') === 0 ? 'mdi-image' : 'mdi-file' }}</v-icon>\n                    \n                      <v-tooltip bottom v-if=\"f.contentType.indexOf('image') === 0\">\n                        <template v-slot:activator=\"{ on, attrs }\">\n                          <span\n                            v-bind=\"attrs\"\n                            v-on=\"on\"\n                          >\n                            {{ f.fileRealName }}\n                          </span>\n                        </template>\n\n                        <span>\n                          <v-img :src=\"`/attachment/${f.fileContextPath}${f.thumbnail}`\" max-height=\"200\" max-width=\"200\"/>\n                        </span>\n                      </v-tooltip>\n                      <span v-else>{{ f.fileRealName }}</span>\n                    </v-btn>\n                <!--                <a :href=\"`${apiEndPoint}/board/${article.boardId}/article/${article.articleId}/file/${f.id}`\" @click.prevent=\"downloadFile(f)\">{{ f.fileRealName }}</a>-->\n              </v-row>\n                </div>\n              </span>\n            </div>\n          </div>\n        </div>\n\n      </v-card-text>\n    </v-card>\n\n    <div class=\"d-flex\">\n      <v-spacer></v-spacer>\n      <v-btn dark color=\"red\" @click=\"deleteArticle(article)\" v-if=\"permission.updatable\">\n        <v-icon left>mdi mdi-delete</v-icon>\n        삭제\n      </v-btn>\n      <v-btn color=\"primary\" dark @click=\"updateForm(article)\" style=\"margin-left: 1rem\" v-if=\"permission.updatable\">\n        <v-icon left>mdi mdi-pencil</v-icon>\n        수정\n      </v-btn>\n      <v-btn @click=\"goList()\" style=\"margin-left: 1rem\">\n        <v-icon left>mdi mdi-format-list-bulleted</v-icon>\n        목록\n      </v-btn>\n    </div>\n\n    <div class=\"flex-grow-1\" v-if=\"board.hasComment\">\n\n      <v-card class=\"my-2\">\n        <v-card-title>댓글</v-card-title>\n        <v-card-text v-if=\"permission.commentable\">\n          <v-form ref=\"formComment\">\n            <v-row>\n\n              <v-col cols=\"4\">\n                <v-text-field v-model=\"comment.writer\" :rules=\"[rules.required]\" label=\"작성자\" dense />\n              </v-col>\n              <v-col cols=\"8\" v-if=\"permission.boardAdmin\">\n                <v-text-field v-model=\"createdAt\" :rules=\"[rules.iso8601]\" label=\"작성일 YYYY-MM-DD (수정시 입력)\" placeholder=\"YYYY-MM-DD\" dense maxlength=\"10\"/>\n              </v-col>\n\n              <v-col cols=\"12\" class=\"d-flex\">\n                <v-textarea v-model=\"comment.contents\" rows=\"3\" outlined auto-grow :rules=\"[rules.required]\"></v-textarea>\n              </v-col>\n            </v-row>\n          </v-form>\n        </v-card-text>\n        <!-- <div class=\"hd-box\" >댓글 <em>{{ commentsCnt }}</em></div> -->\n        <v-card-actions v-if=\"permission.commentable\">\n          <v-spacer></v-spacer>\n          <v-btn class=\"vBtn\" color=\"indigo\" dark @click=\"saveComment\">\n            <v-icon left>mdi mdi-content-save</v-icon>\n            댓글 등록\n          </v-btn>\n        \n        </v-card-actions>\n                <Comment\n                  v-for=\"(comment, key) in comments\"\n                  :key=\"key\"\n                  :id=\"comment.id\"\n                  :createId=\"comment.createdBy\"\n                  :author=\"comment.writer\"\n                  :date=\"comment.createdAt\"\n                  :content=\"comment.contents\"\n                  :children=\"comment.childrenList\"\n                  :totalChildren=\"comment.totalChildren\"\n                  :isDeleted=\"comment.deleted\"\n                  :upcomment=\"comment\" \n                  :reCommentIndex=\"reCommentIndex\"\n                  :isVisibleCommentUpdateForm=\"isVisibleCommentUpdateForm\"\n                  :isVisibleReplyEditor=\"isVisibleReplyEditor\"\n                  @submit:reply=\"onSubmitReply\"\n                  @update:comment=\"onUpdateReply\"\n                  @remove=\"onClickRemoveComment\" \n                ></Comment>\n        <!-- <v-card-text>\n          <v-form ref=\"formListComment\">\n            <v-data-table\n              :headers=\"commentHeaders\"\n              :items=\"comments\"\n              :server-items-length=\"totalItems\"\n              :options.sync=\"options\"\n              item-key=\"commentId\"\n              class=\"elevation-1 commentList\"\n              disable-sort\n              hide-default-header\n            >\n              <template v-slot:top>\n                댓글 ({{totalItems}})\n              </template>\n              <template v-slot:item.writer=\"{value, item}\">\n                <div>{{ value }}</div>\n                {{ item.createdAt | formatDate('YYYY-MM-DD HH:mm') }}\n              </template>\n\n              <template v-slot:item.contents=\"{value,item}\">\n                <div v-if=\"item.id === editComment.id\" class=\"d-flex\">\n                  <v-textarea v-model=\"editComment.contents\" rows=\"3\" outlined auto-grow :rules=\"[rules.required]\" v-if=\"item.id === editComment.id\"></v-textarea>\n                  <div>\n                    <v-btn color=\"#1991eb\" dark @click=\"updateComment\" style=\"margin-left: 1rem\">\n                      <v-icon left>mdi mdi-content-save</v-icon>\n                      수정\n                    </v-btn> <br />\n                    <v-btn @click=\"cancelComment\" style=\"margin-left: 1rem; margin-top: 3px\">\n                      <v-icon left>mdi mdi-reload</v-icon>\n                      취소\n                    </v-btn>\n                  </div>\n                </div >\n                <div v-html=\"value.split('\\n').join('<br />')\" v-else></div>\n              </template>\n\n              <template v-slot:item.actions=\"{ item }\">\n                <v-icon\n                  small\n                  class=\"mr-2\"\n                  @click.stop=\"updateCommentForm(item)\"\n                  v-if=\"permission.boardAdmin || $route.params.id === item.createdBy\"\n                >\n                  mdi-pencil\n                </v-icon>\n                <v-icon\n                  small\n                  @click.stop=\"deleteComment(item)\"\n                  v-if=\"permission.boardAdmin || $route.params.id === item.createdBy\"\n                >\n                  mdi-delete\n                </v-icon>\n\n              </template>\n\n            </v-data-table>\n          </v-form>\n        </v-card-text> -->\n\n      </v-card>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport articleApi from '@/api/ArticleApi'\nimport boardApi from '@/api/BoardApi'\nimport commentApi from '@/api/CommentApi'\n\n\n\n// import ViewerTiptap from \"@/views/component/ViewerTiptapComponent\";\nimport ViewerQuill from \"@/components/editor/ViewerQuillComponent\";\nimport _ from 'lodash'\n\nimport moment from \"moment\";\nimport Comment from '@/apps/component/Comment';\n\n\n\n\nexport default {\n  name: \"ArticleForm\",\n  components: {\n    ViewerQuill,\n    Comment\n  },\n  props: {\n      id: String,\n      boardId : String, \n     },\n  computed: {\n    breadcrumbs() {\n      return [\n        {\n          text: '게시물 관리',\n          to: `/boards/${this.board.id}/articles`,\n          exact: true\n        },\n        {\n          text: '게시물 조회'\n        }\n      ]\n    },\n    createdAt: {\n      get() {\n        // return this.coment.createdAt ? this.coment.createdAt.substr(0, 10) : this.$moment().format(\"YYYY-MM-DD\");\n        return this.comment.createdAt ? this.$moment(this.comment.createdAt, \"YYYY-MM-DD[T]HH:mm:ss\").format(\"YYYY-MM-DD\") : this.$moment().format(\"YYYY-MM-DD\");\n      },\n      set(value) {\n        if(value.length === 10 && this.$moment(value, \"YYYY-MM-DD\").isValid()) {\n          this.comment.createdAt = value ? value + \"T\" + (this.comment.createdAt ? this.$moment(this.comment.createdAt, \"YYYY-MM-DD[T]HH:mm:ss\").format(\"HH:mm:ss\") : \"00:00:00\") : this.comment.createdAt;\n        }\n      }\n    }\n  },\n  data: () => ({\n    board:{},\n    article: {\n      title: null,\n      contents: null,\n      writer: null,\n      always: true,\n      customDate: null\n    },\n    // comment: {\n    //   content: null,\n    //   writer: null,\n    //   createdAt: null,\n    //   createdBy: null,\n    // },\n    recomment: {\n      contents:\"\"\n    },\n    tempcomment: {\n      content: null,\n      writer: null,\n      createdAt: null\n    },\n    commentHeaders: [{value: 'writer'}, {value : 'contents'}, {value: 'actions'}],\n    comments:[],\n    comment: {\n      contents:\"\"\n    },\n    totalItems:0,\n    options:{},\n    reCommentIndex : -1, \n    commentIndex: -1,\n    isVisibleCommentUpdateForm : false,\n    isVisibleReplyEditor:false,\n    period:null,\n    apiEndPoint:process.env.VUE_APP_BASE_API,\n    endPoint:process.env.VUE_APP_ATTACH_FILE_SERVER_URL,\n    rules: {\n      required: value => !!value || '필수 입력 항목입니다..',\n      iso8601: value => (!value || !!/([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))$/.test(value)) || '날짜 형식이 아닙니다.'\n    },\n    editComment: {\n      contents:\"\"\n    },\n    permission: {}\n  }),\n  watch: {\n    options: {\n      handler () {\n        this.search();\n      },\n      deep: true,\n    }\n\n    \n  },\n  methods: {\n    reaction() {\n      articleApi.reaction(this.article.articleId, this.article.boardId).then(res => {\n        if(res.data) {\n          this.article.reactionCount = this.article.reactionCount +1;\n          this.article.readUserHasReaction = true;\n        } else {\n          this.article.reactionCount = this.article.reactionCount -1;\n          this.article.readUserHasReaction = false;\n          // alert(\"이미 처리되었습니다.\")\n        }\n      });\n    },\n    downloadFile(f) {\n\n      articleApi.downloadFile(this.article.boardId, this.article.id, f.id)\n      .then(response => {\n        const blob = new Blob([response.data], { type: response.headers['content-type'] })\n        const link = document.createElement('a')\n        link.href = URL.createObjectURL(blob)\n        link.download = f.fileRealName.slice(f.fileRealName.lastIndexOf('/') + 1);\n        link.click()\n        URL.revokeObjectURL(link.href)\n      })\n      .catch(error => {\n        console.log(error.response);\n        console.log(error.response.status);\n        if(error.response.status === 404)\n          alert(\"파일을 찾을 수 없습니다.\");\n        else\n          alert(error.status);\n      });\n    },\n    onClickRemoveComment(id){ \n      if(confirm('지금 삭제하시면 \\n내용을 복구할 수 없습니다. 삭제하시겠습니까?')) {\n        commentApi.delete(this.article.boardId, id).then(() => {\n          this.search();\n        });\n      }\n    },  \n    onUpdateReply(editreply, id, upcomment){   \n      console.log(upcomment);\n      this.recomment = upcomment;\n      let tempContents = editreply;\n      if(tempContents.length==0){\n        return alert('댓글을 한 글자 이상 입력해주세요.')\n      }\n\n      this.recomment.articleId = this.article.id;\n      this.recomment.boardId = this.article.boardId;\n      this.recomment.commentId = id; \n      this.recomment.contents = tempContents; \n      this.recomment.updateAt = null;\n  \n      commentApi.save(this.article.boardId, this.article.id, this.recomment).then(() => {\n\n\n        this.editreply = \"\";\n        this.recomment.contents = \"\";\n        this.reCommentIndex = -1;\n        this.recomment.upperCommentId = \"\";\n        this.isVisibleCommentUpdateForm = false;\n        this.search();\n      }) \n    },   \n    goList() {\n      this.$router.push({path: `/boards/${this.boardId}/articles`})\n    },\n    deleteArticle(item) {\n      if(confirm('삭제하시겠습니까?')) {\n        articleApi.delete(item.boardId, item.id).then(() => {\n          alert(\"삭제되었습니다.\")\n          this.goList();\n        });\n      }\n    },\n    \n    updateForm(item) {\n      this.$router.push({path:`/boards/${item.boardId}/articles/${item.id}/form`});\n    },\n    async saveComment() {\n      if (!await this.$refs.formComment.validate())\n        return;\n\n        console.log(this.comment);\n\n      // this.comment.createdAt = this.comment.createdAt ? this.comment.createdAt + \"T00:00:00\" : null;\n      commentApi.save(this.boardId, this.id, this.comment).then(() => {\n        this.comment.contents = null;\n        \n        \n        // this.comment.createdAt = null;\n        this.$refs.formComment.resetValidation()\n        // this.$refs.formComment.reset();\n        // this.comment.writer = this.$store.state.user.username;\n        //this.contents = \"\";\n        this.reply = \"\";\n        this.isVisibleReplyEditor = false;\n        this.recomment.contents = \"\";\n       \n        this.recomment.upperCommentId = \"\";\n        this.o_contents = \"\"; \n\n        this.search();\n      }).catch(error => {\n        this.comment.createdAt = this.comment.createdAt.substr(0, 10);\n        alert(error);\n      });\n    },\n    async updateComment() {\n\n      if (!await this.$refs.formListComment.validate())\n        return;\n\n        // this.tempcomment = this.editComment\n        // console.log(this.tempcomment.contents);\n\n      if(confirm('댓글을 수정하시겠습니까?')) {\n        commentApi.save(this.boardId, this.id, this.editComment).then(() => {\n          this.$refs.formComment.resetValidation();\n          (this.comments.filter(c => c.commentId === this.editComment.commentId)?.[0] ?? {}).contents = this.editComment.contents;\n          this.editComment = {};\n          this.search();\n        });\n      }\n    },\n    onSubmitReply(reply, id){  \n\n      console.log(reply);//현재 댓글 쓴 결과.\n      console.log(id); //현재 상위 댓글 ID\n\n      this.recomment = this.comment; \n      let tempContents = reply;\n      if(tempContents.length==0){\n        return alert('댓글을 한 글자 이상 입력해주세요.')\n      } \n\n      this.recomment.articleId = this.article.id;\n      this.recomment.boardId = this.article.boardId;\n      this.recomment.upperCommentId = id;\n      this.recomment.commentId = null;\n      this.recomment.createdAt = null; \n      //console.log(\" this.tempContents ---- \")\n      //console.log( tempContents)\n      //console.log(this.recomment.contents)\n      //console.log(\" this.recomment ---- \")\n      //console.log(this.recomment)\n      this.comment.contents = \"\";\n      this.recomment.contents = tempContents; \n      //console.log(\" this.recomment ---- \")\n      //console.log(this.recomment)\n\n      commentApi.save(this.article.boardId, this.id, this.recomment).then(() => {\n        this.contents = \"\";\n        this.reply = \"\";\n        this.isVisibleReplyEditor = false;\n        this.recomment.contents = \"\";\n        this.reCommentIndex = -1;\n        this.recomment.upperCommentId = \"\";\n        this.comment.contents = \"\";\n        this.o_contents = \"\"; \n        this.search();\n      }) \n    },\n\n    updateCommentForm(item) {\n      this.editComment = _.cloneDeep(item);\n     \n    },\n    cancelComment() {\n      this.editComment = {};\n    },\n    deleteComment(item) {\n      if(confirm('댓글을 삭제하시겠습니까?')) {\n        commentApi.delete(this.boardId, this.id, item.id).then(() => {\n          this.search();\n        });\n      }\n    },\n    search() {\n      if(this.article.id) {\n        const {page, itemsPerPage, size} = this.options;\n        let params = {\n          ...this.param, ...{\n            page: page,\n            size: size ? size : itemsPerPage\n          }\n        };\n        commentApi.findAllByArticleId(this.article.boardId, this.id, params).then(data => {\n          // console.log(data);\n          this.totalItems = data.totalElements;\n          this.comments = data.content;\n\n        });\n      }\n    }\n\n  },\n  async created() {\n\n    console.log(this.id);\n\n    if(this.id) {\n      this.permission = await boardApi.findAssignedPermissionId(this.boardId, {articleId: this.id})\n\n      articleApi.findById(this.boardId, this.id).then(async data => {\n\n\n        this.article = data;\n\n        this.comment.articleId = this.article.id;\n        this.comment.boardId = this.article.boardId;\n\n        this.search();\n\n        // this.article.customDate = this.article.createdAt.substr(0,10);\n\n        this.period = [this.article.startDt, this.article.endDt].filter(d => d !== null).map(d => moment(d).format(\"YYYY년 MM월 DD일\")).join(\" ~ \");\n\n      });\n    }\n    // this.comment.writer = this.$store.getters?.['user/name'] ?? '';\n    // this.comment.writer = this.$store.state.user.username;\n    this.comment.writer = this.$store.getters?.['user/name'] ?? '';\n    // this.comment.createdAt = moment().format(\"YYYY-MM-DD HH:mm:ss\")\n\n    boardApi.findById(this.boardId).then(async data => {\n      this.board = data;\n\n      if (!this.articleId)\n        this.permission = await boardApi.findAssignedPermissionId(this.boardId)\n    });\n\n\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../../assets/style/layout/variables';\n\n.h2Title {\n  @include h2-title;\n}\n\n.formInfo {\n  @include form-info;\n}\n\n.userDd {\n  padding: 10px 0;\n}\n\n.list {\n  overflow: hidden;\n}\n\n.commentList div.v-data-table__wrapper > table > tbody > tr > td:nth-child(1) {\n  width: 120px !important;\n}\n.commentList div.v-data-table__wrapper > table > tbody > tr > td:nth-child(3) {\n  width: 120px !important;\n}\n</style>"]}]}