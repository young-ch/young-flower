{"remainingRequest":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/src/apps/menu/Menus.vue?vue&type=style&index=0&id=6078bad0&lang=css&","dependencies":[{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/src/apps/menu/Menus.vue","mtime":1665995886867},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/css-loader/dist/cjs.js","mtime":1665531751068},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1665531752098},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/postcss-loader/src/index.js","mtime":1665531751243},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/cache-loader/dist/cjs.js","mtime":1665531750829},{"path":"/Users/youngchelchoi/Desktop/workspace/flower/flower-backoffice/node_modules/vue-loader/lib/index.js","mtime":1665531752006}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci8qLnRyZWUtbm9kZS5zZWxlY3RlZD4udHJlZS1jb250ZW50IHsqLwovKiAgYmFja2dyb3VuZDogIzMxNGI1ZiAhaW1wb3J0YW50OyovCi8qfSovCi8qLnRyZWUtbm9kZTpub3QoLnNlbGVjdGVkKT4udHJlZS1jb250ZW50OmhvdmVyIHsqLwovKiAgYmFja2dyb3VuZDogbm9uZSAhaW1wb3J0YW50OyovCi8qfSovCg=="},{"version":3,"sources":["Menus.vue"],"names":[],"mappings":";AAwoBA;AACA;AACA;AACA;AACA;AACA","file":"Menus.vue","sourceRoot":"src/apps/menu","sourcesContent":["<template>\n  <div class=\"d-flex flex-column flex-grow-1\">\n    <div class=\"d-flex align-center py-3\">\n      <div>\n        <div class=\"display-1\">메뉴 관리</div>\n        <v-breadcrumbs :items=\"breadcrumbs\" class=\"pa-0 py-2\"></v-breadcrumbs>\n      </div>\n      <v-spacer></v-spacer>\n      <v-btn color=\"red\" dark @click=\"deleteMenu\" v-if=\"isModify\" style=\"margin-right: 1rem\">\n        <v-icon left>mdi mdi-delete</v-icon>\n        삭제\n      </v-btn>\n      <v-btn @click=\"resetMenu(menu.id)\">\n        <v-icon left>mdi-refresh</v-icon>\n        리셋\n      </v-btn>\n      <v-btn color=\"indigo\" @click=\"savedMenu\" style=\"margin-left: 1rem\" dark>\n        <v-icon left>mdi mdi-content-save</v-icon>\n        저장\n      </v-btn>\n    </div>\n\n    <v-row>\n      <v-col md=\"3\">\n\n        <v-card>\n          <v-card-title>메뉴 목록</v-card-title>\n          <v-card-text>\n\n            <v-card-actions class=\"justify-end\">\n              <v-btn color=\"primary\" @click=\"createMenuForm\">\n                <v-icon small>mdi-plus</v-icon>\n                메뉴 추가\n              </v-btn>\n            </v-card-actions>\n\n            <div class=\"flex-column flex-sm-row\">\n\n              <v-tabs>\n                <v-tab @click=\"changeTreeData('HOME')\">HOME</v-tab>\n                <v-tab @click=\"changeTreeData('ADMIN')\">ADMIN</v-tab>\n<!--                <v-tab @click=\"changeTreeData('MOBILE')\">MOBILE</v-tab>-->\n              </v-tabs>\n\n              <v-text-field v-model=\"treeFilter\" label=\"검색할 메뉴명을 입력해주세요.\" dense clearable outlined style=\"padding-top: 10px \"/>\n              <tree\n                ref=\"menuTree\"\n                :filter=\"treeFilter\"\n                :options=\"treeOptions\"\n                @node:clicked=\"getMenu\"\n                @node:dragging:finish=\"moveMenu\"\n              >\n\n                <span slot-scope=\"{ node }\">\n    <!--              <template v-if=\"!node.hasChildren()\">-->\n                  <!--                <i :class=\"[node.data.activated ? 'fa fa-check-circle' : 'fa fa-ban']\"></i>-->\n                  <!--                {{ node.text }}-->\n                  <!--              </template>-->\n\n                  <!--              <template v-else>-->\n                  <v-btn text>\n    <!--                <i :class=\"[node.data.menuIcon ? node.data.menuIcon : node.data.activated ? 'fa fa-check-circle' : 'fa fa-ban']\"></i>-->\n                    <v-icon small left>{{ node.data.menuIcon ? node.data.menuIcon : node.data.activated ? 'fa fa-check-circle' : 'fa fa-ban' }}</v-icon>\n                    {{ node.text }}\n                    <v-icon small right>{{ node.data.protected ? 'mdi mdi-lock' : 'mdi mdi-lock-open-outline' }}</v-icon>\n                  </v-btn>\n\n                </span>\n\n              </tree>\n\n              <v-card-actions class=\"justify-end\">\n                <v-btn color=\"primary\" @click=\"createMenuForm\">\n                  <v-icon small>mdi-plus</v-icon>\n                  메뉴 추가\n                </v-btn>\n              </v-card-actions>\n\n            </div>\n          </v-card-text>\n        </v-card>\n\n      </v-col>\n\n      <v-col md=\"9\">\n        <v-card>\n          <v-card-title>{{ isModify ? '메뉴 수정' : '메뉴 추가'}}</v-card-title>\n          <!-- names -->\n          <v-form ref=\"menuForm\">\n<!--            <div class=\"d-flex\">-->\n\n            <div class=\"d-flex\">\n              <v-col sm=\"4\">\n\n                <v-row v-if=\"!isModify && parent && Object.keys(parent).length > 0\">\n                  <v-col>\n                    상위 메뉴\n                    <div style=\"padding-left: 22px\">\n                      {{ parent.menuName }}\n                    </div>\n                  </v-col>\n                </v-row>\n\n                <vue-dropzone\n                  v-if=\"!menu.menuCategory || menu.menuCategory === 'HOME' \"\n                  ref=\"menuImageDropzone\"\n                  id=\"dropzone\"\n                  :style=\"'background-color: #ffffff !important;'\"\n                  :options=\"dropzoneOptions\"\n                  :useCustomSlot=\"true\"\n                  @vdropzone-success=\"dropzoneUploadSuccess\"\n                  @vdropzone-complete=\"dropzoneUploadCompleteSuccess\"\n                  @vdropzone-removed-file=\"dropzoneRemove\"\n                  @vdropzone-processing=\"dropzoneProcessing\"\n                >\n                  <div v-if=\"menu.menuImage\" style=\"margin-top: -40px; max-height: 197px\">\n                    <v-badge\n                      bordered\n                      dark\n                      color=\"black\"\n                      icon=\"mdi-delete\"\n                      overlap\n                      @click.native=\"dropzoneRemove\"\n                    >\n                      <v-img :src=\"`${attachmentPath}/menu/${menu.menuImage}`\" max-width=\"200\" max-height=\"150\"/>\n                    </v-badge>\n                  </div>\n                  <div v-else class=\"dropzone-custom-content\">\n                    <h3 class=\"dropzone-custom-title\">메뉴 이미지</h3>\n                    <div class=\"subtitle\">Drag and drop or click to select a file from your computer</div>\n                  </div>\n                </vue-dropzone>\n\n                <v-row v-if=\"menu.menuCategory === 'ADMIN' \">\n                  <v-col>\n<!--                    메뉴 icon css-->\n                    <v-text-field v-model=\"menu.menuIcon\" label=\"메뉴 icon\"\n                                  dense clearable required\n                                  maxlength=\"100\">\n                      <v-icon\n                        slot=\"prepend\"\n\n                      >{{menu.menuIcon}}</v-icon>\n                    </v-text-field>\n                  </v-col>\n                </v-row>\n\n              </v-col>\n\n              <v-col sm=\"8\">\n                <v-row>\n                  <v-col>\n                    메뉴 명\n                    <div style=\"padding-left: 22px\">\n                        <v-text-field v-model=\"menu.menuName\" label=\"메뉴 명을 입력해주세요.\"\n                                      dense clearable required outlined\n                                      maxlength=\"100\"\n                                      :rules=\"[() => !!menu.menuName || '메뉴 명을 입력해주세요.']\"/>\n                    </div>\n                  </v-col>\n                </v-row>\n\n                <v-row>\n                  <v-col cols=\"6\">\n                    메뉴 사용 여부\n                    <div style=\"padding-left: 22px\">\n                      <v-switch\n                        v-model=\"menu.activated\"\n                        flat\n                        color=\"primary\"\n                        :label=\"menu.activated ? '메뉴 사용' : '메뉴 사용 안함'\"\n                      ></v-switch>\n                    </div>\n                  </v-col>\n                  <v-col cols=\"6\">\n                    접근 제어\n                    <div style=\"padding-left: 22px\">\n                      <v-switch\n                        v-model=\"menu.protected\"\n                        flat\n                        color=\"primary\"\n                        :label=\"menu.protected ? '권한 필요' : '공개'\"\n                      ></v-switch>\n                    </div>\n                  </v-col>\n                </v-row>\n\n              </v-col>\n            </div>\n<!--            </div>-->\n\n            <div class=\"d-flex\">\n              <v-col sm=\"4\">\n                메뉴 타입\n                <div style=\"padding-left: 22px;\" class=\"d-flex\">\n                  <v-checkbox v-model=\"menu.menuType\" value=\"TYPE_BOARD\" label=\"게시판\" style=\"padding-right: 10px\" :rules=\"[() => !!menu.menuType || '메뉴타입을 선택해주세요.']\"></v-checkbox>\n                  <v-checkbox v-model=\"menu.menuType\" value=\"TYPE_PAGE\" label=\"정적페이지\" style=\"padding-right: 10px\" :rules=\"[() => !!menu.menuType || '메뉴타입을 선택해주세요.']\"></v-checkbox>\n                  <v-checkbox v-model=\"menu.menuType\" value=\"TYPE_LINK\" label=\"URL\" :rules=\"[() => !!menu.menuType || '메뉴타입을 선택해주세요.']\"></v-checkbox>\n                  <v-checkbox v-model=\"menu.menuType\" value=\"TYPE_BLANK\" label=\"빈메뉴\" :rules=\"[() => !!menu.menuType || '메뉴타입을 선택해주세요.']\"></v-checkbox>\n                </div>\n\n              </v-col>\n              <v-col sm=\"8\">\n                메뉴 연결\n                <div style=\"padding-left: 22px;\" class=\"d-flex\">\n\n                  <v-autocomplete :items=\"boards\"\n                                  item-value=\"id\"\n                                  item-text=\"boardName\"\n                                  label=\"게시판을 선택해주세요.\"\n                                  dense clearable flat\n                                  outlined required\n                                  v-model=\"menu.boardId\"\n                                  :rules=\"[rules.common.required]\"\n                                  v-if=\"menu.menuType && menu.menuType === 'TYPE_BOARD'\"\n                  />\n                  <v-autocomplete :items=\"contents\" item-value=\"id\" item-text=\"title\"\n                                  label=\"페이지를 선택해주세요.\"\n                                  dense clearable flat\n                                  outlined required\n                                  v-model=\"menu.contentId\"\n                                  :rules=\"[rules.common.required]\"\n                                  v-if=\"menu.menuType && menu.menuType === 'TYPE_PAGE'\"\n                  />\n                  <v-text-field v-model=\"menu.url\" label=\"URL 을 입력해주세요.\"\n                                dense clearable required outlined\n                                maxlength=\"255\"\n                                :rules=\"[() => !!menu.url || 'URL 을 입력해주세요.']\"\n                                v-if=\"menu.menuType && menu.menuType === 'TYPE_LINK'\"/>\n\n                </div>\n              </v-col>\n            </div>\n\n<!--            <v-card-actions>-->\n<!--              <v-spacer></v-spacer>-->\n\n<!--              <v-btn color=\"red\" @click=\"deleteMenu\" v-if=\"isModify\">-->\n<!--                <v-icon left>mdi mdi-delete</v-icon>-->\n<!--                삭제-->\n<!--              </v-btn>-->\n<!--              <v-btn color=\"indigo\" @click=\"savedMenu\">-->\n<!--                <v-icon left>mdi mdi-content-save</v-icon>-->\n<!--                저장-->\n<!--              </v-btn>-->\n<!--              <v-btn @click=\"resetMenu(menu.id)\">-->\n<!--                <v-icon small>mdi-refresh</v-icon>-->\n<!--                취소-->\n<!--              </v-btn>-->\n\n<!--            </v-card-actions>-->\n          </v-form>\n\n        </v-card>\n        <div class=\"d-flex flex-column flex-grow-1\">\n          <div class=\"d-flex align-center py-3\">\n            <v-spacer></v-spacer>\n            <v-btn color=\"red\" dark @click=\"deleteMenu\" v-if=\"isModify\" style=\"margin-right: 1rem\">\n              <v-icon left>mdi mdi-delete</v-icon>\n              삭제\n            </v-btn>\n            <v-btn @click=\"resetMenu(menu.id)\">\n              <v-icon left>mdi-refresh</v-icon>\n              리셋\n            </v-btn>\n            <v-btn color=\"indigo\" @click=\"savedMenu\" style=\"margin-left: 1rem\" dark>\n              <v-icon left>mdi mdi-content-save</v-icon>\n              저장\n            </v-btn>\n          </div>\n        </div>\n      </v-col>\n    </v-row>\n\n  </div>\n</template>\n\n<script>\nimport rules from \"@/utils/rules\";\nimport menuApi from '@/api/MenuApi';\n\nimport ContentApi from '@/api/ContentApi';\nimport BoardApi from '@/api/BoardApi';\n\nimport _ from \"lodash\";\nimport LiquorTree from 'liquor-tree';\nimport vue2Dropzone from 'vue2-dropzone'\nimport 'vue2-dropzone/dist/vue2Dropzone.min.css'\n\nexport default {\n  components: {\n    [LiquorTree.name]: LiquorTree,\n    vueDropzone: vue2Dropzone\n  },\n  data() {\n    return {\n      menu: {\n        menuName: null,\n        menuImage: null,\n        menuType: \"TYPE_LINK\",\n        url: null,\n        activated: null,\n        protected: null,\n        contentId: null,\n        boardId: null\n      },\n      rows: [],\n      treeFilter: null,\n      attachmentPath: process.env.VUE_APP_ATTACH_FILE_SERVER_URL,\n      searchKeyword: null,\n      standaloneIds:[],\n      exceptedIds:[],\n      searchOpen:[],\n      lastOpen: [],\n      allOpened: false,\n      tab: null,\n      rules,\n      isLoading: false,\n      breadcrumbs: [{\n        text: '메뉴 관리',\n        disabled: false,\n        href: '#'\n      }, {\n        text: '메뉴 목록'\n      }],\n      waitingSearch: false,\n      message:{\n        error:'',\n        success:''\n      },\n      options:{\n        size: 10\n      },\n      param:{},\n      totalItems:0,\n      datasets: [],\n      companionName:{},\n      origin:{},\n\n      hasMenus: [],\n      menus: [],\n      treeOptions: {\n        parentSelect: true,\n        // propertyNames: {\n        //   states: 'options',\n        //   text: \"text\",\n        //   children: \"children\"\n        // },\n        dnd:true,\n        checkbox: false,\n        filter: {\n          matcher(query, node) {\n            return new RegExp(query, 'i').test(node.data.menuName)\n          },\n          emptyText: '일치하는 메뉴가 없습니다.',\n          plainList: true,\n          showChildren: true\n\n        },\n      },\n\n      parent: {},\n      isModify: false,\n      treeItem: null,\n      searchRoleId:null,\n\n      boards: [],\n      contents: []\n\n    }\n  },\n  computed: {\n    dropzoneOptions() {\n      return {\n        url: `${process.env.VUE_APP_GW_URL}/menus/menu/image/upload`,\n        thumbnailHeight: 110,\n        thumbnailWidth: 140,\n        maxFilesize: 10, // mb\n        maxFiles: 2,\n        // acceptedFileTypes: \"image/*\",\n        acceptedFiles: \"image/*\",\n        headers: {\n          'Authorization': `bearer ${this?.$store?.getters?.[\"user/token\"] ?? ''}`\n        },\n        uploadMultiple: false,\n        clickable: true,\n        addRemoveLinks: true\n      }\n    }\n  },\n  watch: {\n  },\n  methods: {\n    dropzoneUploadSuccess(uploadedFileInfo, res) {\n\n      const rejectedFiles = this.$refs.menuImageDropzone.getRejectedFiles()\n      for (const f of rejectedFiles) {\n        this.$refs.menuImageDropzone.removeFile(f);\n      }\n\n      const acceptedFiles = this.$refs.menuImageDropzone.getAcceptedFiles();\n      for (const f of acceptedFiles) {\n        if(f !== uploadedFileInfo)\n          this.$refs.menuImageDropzone.removeFile(f);\n      }\n\n      this.menu.menuImage = res.saveName\n\n    },\n    dropzoneUploadCompleteSuccess(response) {\n\n      if(!response.accepted) {\n        const acceptedFiles = this.$refs.menuImageDropzone.getAcceptedFiles()\n        const rejectedFiles = this.$refs.menuImageDropzone.getRejectedFiles()\n        const allFile = [...acceptedFiles, ...rejectedFiles]\n        for (const f of allFile) {\n          if(f !== response) {\n            this.$refs.menuImageDropzone.removeFile(f); // callback -> imageRemove\n          }\n        }\n      }\n\n      // console.log(this.menu.menuImage);\n    },\n    dropzoneRemove() {\n      this.menu.menuImage = null;\n    },\n    dropzoneProcessing() {\n      this.$refs.menuImageDropzone.setOption('headers', {Authorization: `bearer ${sessionStorage.getItem(\"X-Token\") ?? ''}`})\n    },\n\n\n    uploadedRemove() {\n      this.menu.menuImage = null;\n    },\n\n    async changeTreeData(menuCategory) {\n      this.$refs?.menuForm?.resetValidation();\n\n      console.log(this.$refs.menuForm);\n\n      this.menu = {\n        menuCategory: menuCategory\n      }\n      this.parent = {}\n      this.treeVisible = false;\n      this.menus = await this.loadTreeData(menuCategory);\n      this.treeVisible = true;\n\n      this.$refs.menuTree.setModel(this.menus)\n      // this.$refs.menuTree.expandAll()\n      // console.log(this.menus)\n    },\n    async getMenu(node) {\n\n      this.$refs.menuImageDropzone?.removeAllFiles()\n\n      if(node.states.selected) {\n\n        await node.select(false);\n        node.unselect();\n\n        this.treeItem = node;\n        this.menu = {'menuCategory' : this.menu?.menuCategory??''}\n        this.parent = null;\n        this.isModify = false;\n        this.$refs.menuForm.resetValidation()\n      } else {\n        this.treeItem = node;\n        this.menu = await menuApi.findMenuById(node.data.id);\n        this.parent = _.cloneDeep(this.menu);\n        this.isModify = true;\n      }\n    },\n    async createMenuForm() {\n      console.log(this.menu.menuCategory);\n\n      this.menu = {\n        menuCategory: this.menu.menuCategory ?? 'HOME'\n      }\n      this.isModify = false\n    },\n    async savedMenu() {\n\n      if (!await this.$refs.menuForm.validate())\n        return;\n\n      if(!this.menu.parentId && !this.isModify)\n        this.menu.parentId = this.parent?.id;\n\n      this.menu.menuCategory = this.menu.menuCategory??'HOME'\n      menuApi.saveMenu(this.menu).then(async savedMenu => {\n        if(this.flatList(this.$refs.menuTree.findAll().tree.model).map(t => t.data.id).includes(savedMenu.id)) {\n\n          this.treeItem.data.menuName = savedMenu.menuName;\n          this.treeItem.data.activated = savedMenu.activated;\n          this.treeItem.text = savedMenu.menuName;\n\n        } else {\n\n          let item = {\n            text: savedMenu.menuName,\n            data: {\n              id: savedMenu.id,\n              menuName: savedMenu.menuName,\n              activated: savedMenu.activated,\n              protected: savedMenu.protected,\n              text: savedMenu.menuName\n            },\n            menuName: savedMenu.menuName,\n            state: {selected: false}\n          };\n\n          if(savedMenu.parentId) {\n            this.treeItem.states.expanded = true;\n            const parentNode = this.$refs.menuTree.find({\n              data: {\n                id: savedMenu.parentId\n              }\n            })[0];\n\n            parentNode.append(item);\n            // this.treeItem = this.$refs.menuTree.append(parentNode, item);\n          } else {\n            // console.log(\"--------------\")\n            // console.log(item);\n            this.treeItem = await this.$refs.menuTree.append(item);\n            // console.log(this.treeItem);\n            // await this.changeTreeData(savedMenu.menuCategory);\n          }\n        }\n\n        this.menu = savedMenu;\n        this.menu.childMenus = [];\n\n        this.menu = await menuApi.findMenuById(savedMenu.id);\n        this.isModify = true;\n\n        alert(\"저장되었습니다.\")\n      });\n\n    },\n    deleteMenu() {\n      if (this.menu.childMenus?.length ?? 0 !== 0) {\n        alert(\"하위 메뉴가 존재합니다.\");\n        return false;\n      }\n      if (confirm(\"해당 메뉴를 삭제하시겠습니까?\")) {\n        menuApi.deleteMenu(this.menu.id).then(() => {\n          this.$refs.menuForm.resetValidation();\n\n          this.menu = {};\n          this.parent = null;\n          this.treeItem.remove();\n          this.isModify = false;\n\n          alert(\"삭제되었습니다.\")\n        });\n      }\n\n    },\n    async resetMenu(id) {\n      if(id) {\n        this.menu = await menuApi.findMenuById(id);\n        this.parent = _.cloneDeep(this.menu);\n        this.isModify = true;\n      } else {\n        this.menu = {}\n        this.parent = null;\n        this.isModify = false;\n        this.$refs.menuForm.resetValidation()\n      }\n    },\n    async moveMenu(sourceNode, destinationNode, pos) {\n      let position = new Map();\n      position.set('drag-above', 'UP');\n      position.set('drag-below', 'DOWN');\n      position.set('drag-on', 'IN');\n\n      await menuApi.moveMenu(sourceNode.data.id, destinationNode.data.id, position.get(pos));\n    },\n    flatList(items) {\n      console.log(items);\n      if(items && items.length > 0) {\n        return items.flatMap(i => {\n\n          if(i.children && i.children.length > 0) {\n            return [this.flatList(i.children), i].flatMap(i=>i);\n          } else {\n            return [i]\n          }\n\n        });\n      } else\n        return [];\n    },\n    async loadTreeData(category) {\n      let temp = await menuApi.findMenusByCategory(category);\n      temp.forEach(t => this.recursiveGeneratedTree(t, 1));\n      return temp;\n    },\n    recursiveGeneratedTree(item, depth) {\n      item.data = {\n        id : item.id,\n        menuName : item.menuName,\n        menuIcon : item.menuIcon,\n        activated : item.activated,\n        protected: item.protected\n      };\n      item.text = item.menuName;\n\n\n      // item.options = {expanded: true, dropable: true, draggable: true};\n      item.state = {expanded: true, dropable: true, draggable: true};\n      item.childMenus?.forEach(t => this.recursiveGeneratedTree(t, depth+1));\n      item.children = item.childMenus\n\n\n    }\n  },\n  mounted() {\n    this.loadTreeData('HOME').then(async data => {\n      this.menus = this.$refs.menuTree.tree.parse(data);\n      // this.$set(this.$refs.menuTree, 'model', this.menus);\n      this.$refs.menuTree.setModel(this.menus)\n      this.$refs.menuTree.expandAll()\n    });\n\n    // const adminTree = this.$refs.adminMenuTree.tree\n\n    // this.loadTreeData('ADMIN').then(data => {\n    //   this.adminMenus = this.$refs.adminMenuTree.tree.parse(data);\n    //   this.$set(this.$refs.adminMenuTree, 'model', this.adminMenus);\n    // });\n\n    // this.menus = await this.menus;\n  },\n  created() {\n    ContentApi.findContents().then(data => {\n      this.contents = data.content.filter(p => p.activated);\n    });\n    BoardApi.findAll().then(data => {\n      this.boards = data;\n    })\n  }\n}\n</script>\n<style>\n/*.tree-node.selected>.tree-content {*/\n/*  background: #314b5f !important;*/\n/*}*/\n/*.tree-node:not(.selected)>.tree-content:hover {*/\n/*  background: none !important;*/\n/*}*/\n</style>\n"]}]}